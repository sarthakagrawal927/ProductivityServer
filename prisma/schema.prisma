// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// enum JournalType {
//     GRATITUDE
//     EVENT
//     IDEA
//     LEARNING
// }

// enum Priority {
//     TOP
//     HIGH
//     MEDIUM
//     LOW
//     MAYBE
// }

// enum Status {
//     NEW
//     PENDING
//     PROGRESSING
//     COMPLETED
//     BLOCKED
// }

model User {
    id       String @id @unique @default(uuid())
    email    String @unique
    name     String
    password String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Journal Journal[]
    Task    Task[]
    Goal    Goal[]
    Habit   Habit[]
}

model Tag {
    id          String   @id @unique @default(uuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Journal   Journal? @relation(fields: [journalId], references: [id])
    journalId String?
    Task      Task?    @relation(fields: [taskId], references: [id])
    taskId    String?
    Goal      Goal?    @relation(fields: [goalId], references: [id])
    goalId    String?
    Habit     Habit?   @relation(fields: [habitId], references: [id])
    habitId   String?

}

// model TimeSlot {
//     id     String   @id @unique @default(uuid())
//     start  DateTime
//     end    DateTime
//     name   String?
//     task   Task?    @relation(fields: [taskId], references: [id])
//     taskId String?  @unique

//     goal   Goal?   @relation(fields: [goalId], references: [id])
//     goalId String?
// }

model Journal {
    id          String   @id @unique @default(uuid())
    name        String
    description String?
    tags        Tag[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User?    @relation(fields: [userId], references: [id])
    userId      String?

    journalType String // gratitude, idea, event, learning
}

model Task {
    id          String   @id @unique @default(uuid())
    name        String
    description String?
    tags        Tag[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User?    @relation(fields: [userId], references: [id])
    userId      String?

    deadline       DateTime?
    priority       String    @default("MEDIUM")
    status         String    @default("NEW")
    predictedHours Float?
    // timeslot       TimeSlot?
}

model Goal {
    id          String   @id @unique @default(uuid())
    name        String
    description String?
    tags        Tag[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User?    @relation(fields: [userId], references: [id])
    userId      String?

    why       String
    relevance String
}

model Habit {
    id          String   @id @unique @default(uuid())
    name        String
    description String?
    tags        Tag[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User?    @relation(fields: [userId], references: [id])
    userId      String?

    startDate   DateTime @default(now())
    trackRecord String?  @default("")
}
