// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Type {
    GRATITUDE
    EVENT
    IDEA
    LEARNING
}

enum Priority {
    VERY_HIGH
    HIGH
    MEDIUM
    LOW
    VERY_LOW
}

enum Status {
    NEW
    PENDING
    IN_PROGRESS
    COMPLETED
    BLOCKED
}

model User {
    id       String @id @unique @default(uuid())
    email    String @unique
    name     String
    password String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    planForTomorrow TimeSlot[]
    journals        Journal[]
    goals           Goal[]
    habits          Habit[]
    tasks           Task[]
    projects        Project[]
}

model Tag {
    id          String  @id @unique @default(uuid())
    name        String
    description String?

    Generic   Generic[] @relation(fields: [genericId], references: [id])
    genericId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Generic {
    id          String  @id @unique @default(uuid())
    name        String
    description String?
    tags        Tag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Task    Task?
    Goal    Goal?
    Habit   Habit?
    Journal Journal?
    Project Project?
}

model TimeSlot {
    id     String   @id @unique
    start  DateTime
    end    DateTime
    name   String?
    task   Task?    @relation(fields: [taskId], references: [id])
    taskId String   @unique

    User   User?   @relation(fields: [userId], references: [id])
    userId String?

    Habit Habit[]

    Goal   Goal?   @relation(fields: [goalId], references: [id])
    goalId String?
}

model Journal {
    id        String  @id @unique
    base      Generic @relation(fields: [genericId], references: [id])
    genericId String  @unique
    User      User?   @relation(fields: [userId], references: [id])
    userId    String?

    type Type // gratitude, idea, event, learning
}

model Task {
    id        String  @id @unique
    base      Generic @relation(fields: [genericId], references: [id])
    genericId String  @unique
    User      User?   @relation(fields: [userId], references: [id])
    userId    String?

    deadline       DateTime?
    priority       Priority
    status         Status
    predictedHours Float
    Timeslot       TimeSlot?
    Project        Project?  @relation(fields: [projectId], references: [id])
    projectId      String?
}

model Goal {
    id        String  @id @unique
    base      Generic @relation(fields: [genericId], references: [id])
    genericId String  @unique
    User      User?   @relation(fields: [userId], references: [id])
    userId    String?

    why       String
    relevance String

    predictedTimeline TimeSlot[]
}

model Habit {
    id        String  @id @unique
    base      Generic @relation(fields: [genericId], references: [id])
    genericId String  @unique
    User      User?   @relation(fields: [userId], references: [id])
    userId    String?

    startDate   DateTime
    trackRecord Boolean[]

    timeSlot   TimeSlot? @relation(fields: [timeslotId], references: [id])
    timeslotId String
}

model Project {
    id        String  @id @unique
    base      Generic @relation(fields: [genericId], references: [id])
    genericId String  @unique
    tasks     Task[]
    User      User?   @relation(fields: [userId], references: [id])
    userId    String?
}
